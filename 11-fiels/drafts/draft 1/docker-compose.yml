version: '3'
services:
  # Zookeeper and Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-log:/var/lib/zookeeper/log
    networks:
      - stock-market-network

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka-data:/var/lib/kafka/data
      - ./kafka-broker/kafka-config.sh:/scripts/kafka-config.sh
    networks:
      - stock-market-network

  # Database services
  postgres_db:
    image: postgres:14
    container_name: postgres_db
    environment:
      POSTGRES_DB: stock_data
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - stock-market-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - stock-market-network

  # Producer service
  producer-service:
    build:
      context: ./producer-service
      dockerfile: Dockerfile
    container_name: producer-service
    depends_on:
      - kafka
    environment:
      - KAFKA_BROKER=kafka:9092
    networks:
      - stock-market-network
    restart: unless-stopped

  # Consumer services
  consumer-data-storage:
    build:
      context: ./consumer-data-storage
      dockerfile: Dockerfile
    container_name: consumer-data-storage
    depends_on:
      - kafka
      - postgres_db
    environment:
      - KAFKA_BROKER=kafka:9092
      - POSTGRES_HOST=postgres_db
    networks:
      - stock-market-network
    restart: unless-stopped

  consumer-batch-processing:
    build:
      context: ./consumer-batch-processing
      dockerfile: Dockerfile
    container_name: consumer-batch-processing
    depends_on:
      - kafka
      - postgres_db
    environment:
      - KAFKA_BROKER=kafka:9092
      - POSTGRES_HOST=postgres_db
    networks:
      - stock-market-network
    restart: unless-stopped

  consumer-stream-storage:
    build:
      context: ./consumer-stream-storage
      dockerfile: Dockerfile
    container_name: consumer-stream-storage
    depends_on:
      - kafka
      - postgres_db
    environment:
      - KAFKA_BROKER=kafka:9092
      - POSTGRES_HOST=postgres_db
    networks:
      - stock-market-network
    restart: unless-stopped

  consumer-trading-bot:
    build:
      context: ./consumer-trading-bot
      dockerfile: Dockerfile
    container_name: consumer-trading-bot
    depends_on:
      - kafka
      - postgres_db
    environment:
      - KAFKA_BROKER=kafka:9092
      - POSTGRES_HOST=postgres_db
    networks:
      - stock-market-network
    restart: unless-stopped

  consumer-dashboard:
    build:
      context: ./consumer-dashboard
      dockerfile: Dockerfile
    container_name: consumer-dashboard
    depends_on:
      - postgres_db
      - elasticsearch
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_HOST=postgres_db
    networks:
      - stock-market-network
    restart: unless-stopped

volumes:
  zookeeper-data:
  zookeeper-log:
  kafka-data:
  postgres_data:
  elasticsearch_data:

networks:
  stock-market-network:
    driver: bridge
